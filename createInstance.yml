---
# Requires opensstack.cloud community collection to create resources on an openstack system.
# Uses authentication information placed into a clouds.yaml file that defines a named cloud:
# "computecanada_arbutus". Auth information is driven by openstacksdk, which means that values
# can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml
# or ~/.config/openstack/clouds.yaml.
- name: Create a Compute Instance, Add security groups, and update local known_hosts with new ssh fingerprint
  hosts: localhost
  block:
    - name: Create Security Groups for OMERO, Web, ping and ssh
      openstack.cloud.security_group:
        cloud: computecanada_arbutus
        state: present
        name: "{{ item }}"
      with_items:
        - web
        - ping
        - omero
        - ssh
        
    - name: Add security group rules for web security group
      openstack.cloud.security_group_rule:
        cloud: computecanada_arbutus
        security_group: web
        protocol: tcp
        port_range_min: "{{ item }}"
        port_range_max: "{{ item }}"
        remote_ip_prefix: 0.0.0.0/0
      with_items:
        - 80
        - 443
        
    - name: Add security group rules for OMERO security group
      openstack.cloud.security_group_rule:
        cloud: computecanada_arbutus
        security_group: omero
        protocol: tcp
        port_range_min: "{{ item }}"
        port_range_max: "{{ item }}"
        remote_ip_prefix: 0.0.0.0/0
      with_items:
        - 4063
        - 4064
        
    - name: Add security group rules for ssh security group
      openstack.cloud.security_group_rule:
        cloud: computecanada_arbutus
        security_group: ssh
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: "{{ item }}"
      with_items:
        - 172.103.141.33/22 #home range of ip addresses possible
        - 142.X.X.X/24.     # work range of ip addresses possible
        
    - name: Add security group rules for ping security group
      openstack.cloud.security_group_rule:
        cloud: computecanada_arbutus
        security_group: ping
        protocol: icmp
        remote_ip_prefix: 0.0.0.0/0      
  
    - name: create an instance
      openstack.cloud.server:
        state: present
        cloud: computecanada_arbutus
        name: "{{ server_name }}"
        description: "{{ description }}"
        image: "{{ image }}"
        reuse_ips: false
        key_name: "{{ keypair }}"
        timeout: 200
        flavor: "{{ flavour }}"
        network: "{{ network }}" 
        security_groups: "{{ item }}"      
        floating_ips:
          - "{{ floating_ip }}"
      with_items:
        - default
        - web
        - omero
        - ping
        

        
      
    - name: remove the ip address SSH key from the local known_hosts file in case of ip reuse
      known_hosts:
        state: absent
        host: "{{ floating_ip }}"
 
    - name: remove the fqdn SSH key from the local known_hosts file to prevent timeout below
      known_hosts:
        state: absent
        host: "{{floating_ip.split('.')[0]}}-{{floating_ip.split('.')[1]}}-\
        {{floating_ip.split('.')[2]}}-{{floating_ip.split('.')[3]}}.\
        cloud.computecanada.ca"
                       
    - name: get new fqdn fingerprint so we can ssh to new instance without intervention
      shell: "ssh-keyscan -t rsa {{floating_ip.split('.')[0]}}-{{floating_ip.split('.')[1]}}-\
        {{floating_ip.split('.')[2]}}-{{floating_ip.split('.')[3]}}.\
        cloud.computecanada.ca"
      register: output1
 
    - name: Add this new key to the localhost's known_hosts file to allow connection from ansible
      known_hosts:
        state: present
        name: "{{floating_ip.split('.')[0]}}-{{floating_ip.split('.')[1]}}-\
        {{floating_ip.split('.')[2]}}-{{floating_ip.split('.')[3]}}.\
        cloud.computecanada.ca"
        key: "{{ output1.stdout_lines[0] }}"
        path: "~/.ssh/known_hosts"    
 
    - name: get key ip address fingerprint for new instance
      shell: "ssh-keyscan -t rsa {{ floating_ip }}"
      register: output2

    - name: Add this new key to the localhost's known_hosts file to allow connection from ansible
      known_hosts:
        state: present
        name: "{{ floating_ip }}"
        key: "{{ output2.stdout_lines[0] }}"
        path: "~/.ssh/known_hosts"
  
#----------------------------------      END create new instance      --------------------      

#----------------------------------      BEGIN create new volume      --------------------       
- name: Create and Attach a New Openstack CINDR  Volume to the instance created above
  hosts: localhost
  block:
    - name: create a new CINDER volume
      openstack.cloud.volume:
        cloud: computecanada_arbutus
        state: present
        size:  "{{ volume_size_gb }}"   #(in Gb)
        display_name: "{{ volume_name }}"
        display_description: "{{ volume_description }}"
        
    - name: "Attach Volume: {{ volume_name }} to Server: {{ server_name }} on {{ device }}"
      openstack.cloud.server_volume:
        cloud: computecanada_arbutus
        state: present
        server: "{{ server_name }}"
        volume: "{{ volume_name }}"
        device: "{{ device }}"
  when: create_new_volume == True
